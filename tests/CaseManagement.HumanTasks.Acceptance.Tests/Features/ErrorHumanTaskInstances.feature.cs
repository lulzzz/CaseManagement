// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CaseManagement.HumanTasks.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ErrorHumanTaskInstancesFeature : Xunit.IClassFixture<ErrorHumanTaskInstancesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ErrorHumanTaskInstances.feature"
#line hidden
        
        public ErrorHumanTaskInstancesFeature(ErrorHumanTaskInstancesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ErrorHumanTaskInstances", "\tCheck errors returned by /humantaskinstances", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to create task with bad TaskName")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to create task with bad TaskName")]
        public virtual void CheckErrorIsReturnedWhenTryingToCreateTaskWithBadTaskName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to create task with bad TaskName", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table56.AddRow(new string[] {
                        "humanTaskName",
                        "invalidname"});
#line 5
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantaskinstances\'", ((string)(null)), table56, "When ");
#line 8
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task definition \'invalidname\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to create task and parameters are invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to create task and parameters are invalid")]
        public virtual void CheckErrorIsReturnedWhenTryingToCreateTaskAndParametersAreInvalid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to create task and parameters are invalid", null, ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table57.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "taskInitiator"});
#line 15
 testRunner.When("authenticate", ((string)(null)), table57, "When ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table58.AddRow(new string[] {
                        "humanTaskName",
                        "addClient"});
            table58.AddRow(new string[] {
                        "operationParameters",
                        "{ \"isGoldenClient\": \"bad\" }"});
#line 18
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances\'", ((string)(null)), table58, "And ");
#line 22
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Parameter \'firstName\' is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
 testRunner.Then("JSON \'errors.bad_request[1]\'=\'Parameter \'isGoldenClient\' is not a valid \'BOOL\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to create task and authenticated user is not " +
            "a task initiator")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to create task and authenticated user is not " +
            "a task initiator")]
        public virtual void CheckErrorIsReturnedWhenTryingToCreateTaskAndAuthenticatedUserIsNotATaskInitiator()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to create task and authenticated user is not " +
                    "a task initiator", null, ((string[])(null)));
#line 29
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table59.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "badUser"});
#line 30
 testRunner.When("authenticate", ((string)(null)), table59, "When ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table60.AddRow(new string[] {
                        "Key",
                        "Value"});
            table60.AddRow(new string[] {
                        "humanTaskName",
                        "addClient"});
            table60.AddRow(new string[] {
                        "operationParameters",
                        "{ \"firstName\": \"firstname\", \"isGoldenClient\": \"true\" }"});
#line 33
    testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances\'", ((string)(null)), table60, "And ");
#line 38
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.Then("JSON \'status\'=\'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 42
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'User is not authorized\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to get invalid humantask instance details")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to get invalid humantask instance details")]
        public virtual void CheckErrorIsReturnedWhenTryingToGetInvalidHumantaskInstanceDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to get invalid humantask instance details", null, ((string[])(null)));
#line 44
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 45
 testRunner.When("execute HTTP GET request \'http://localhost/humantaskinstances/invalid/details\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task instance \'invalid\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to get invalid humantask instance history")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to get invalid humantask instance history")]
        public virtual void CheckErrorIsReturnedWhenTryingToGetInvalidHumantaskInstanceHistory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to get invalid humantask instance history", null, ((string[])(null)));
#line 52
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 53
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantaskinstances/invalid/histo" +
                    "ry\'", ((string)(null)), table61, "When ");
#line 55
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 59
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task instance \'invalid\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to nominate and GroupNames, UserIdentifiers p" +
            "arameters are specified")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to nominate and GroupNames, UserIdentifiers p" +
            "arameters are specified")]
        public virtual void CheckErrorIsReturnedWhenTryingToNominateAndGroupNamesUserIdentifiersParametersAreSpecified()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to nominate and GroupNames, UserIdentifiers p" +
                    "arameters are specified", null, ((string[])(null)));
#line 61
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table62.AddRow(new string[] {
                        "groupNames",
                        "[\"group\"]"});
            table62.AddRow(new string[] {
                        "userIdentifiers",
                        "[\"user\"]"});
#line 62
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantaskinstances/invalid/nomin" +
                    "ate\'", ((string)(null)), table62, "When ");
#line 66
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 70
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'GroupNames and UserIdentifiers parameters cannot be" +
                    " specified at the same time\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to nominate and GroupNames, UserIdentifiers p" +
            "arameters are not specified")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to nominate and GroupNames, UserIdentifiers p" +
            "arameters are not specified")]
        public virtual void CheckErrorIsReturnedWhenTryingToNominateAndGroupNamesUserIdentifiersParametersAreNotSpecified()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to nominate and GroupNames, UserIdentifiers p" +
                    "arameters are not specified", null, ((string[])(null)));
#line 72
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 73
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantaskinstances/invalid/nomin" +
                    "ate\'", ((string)(null)), table63, "When ");
#line 75
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 78
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Parameters \'GroupNames,UserIdentifiers\' are missing" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to nominate an unknown human task instance")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to nominate an unknown human task instance")]
        public virtual void CheckErrorIsReturnedWhenTryingToNominateAnUnknownHumanTaskInstance()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to nominate an unknown human task instance", null, ((string[])(null)));
#line 81
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table64.AddRow(new string[] {
                        "groupNames",
                        "[\"group\"]"});
#line 82
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantaskinstances/invalid/nomin" +
                    "ate\'", ((string)(null)), table64, "When ");
#line 85
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 88
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 89
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task instance \'invalid\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to nominate and user is not authorized")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to nominate and user is not authorized")]
        public virtual void CheckErrorIsReturnedWhenTryingToNominateAndUserIsNotAuthorized()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to nominate and user is not authorized", null, ((string[])(null)));
#line 91
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table65.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "taskInitiator"});
#line 92
 testRunner.When("authenticate", ((string)(null)), table65, "When ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table66.AddRow(new string[] {
                        "humanTaskName",
                        "noPotentialOwner"});
#line 95
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances\'", ((string)(null)), table66, "And ");
#line 98
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
 testRunner.And("extract \'id\' from JSON body into \'humanTaskInstanceId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table67.AddRow(new string[] {
                        "groupNames",
                        "[\"group\"]"});
#line 100
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantaskinstances/$humanTaskIns" +
                    "tanceId$/nominate\'", ((string)(null)), table67, "When ");
#line 103
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 106
 testRunner.Then("JSON \'status\'=\'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 107
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'User is not authorized\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to get description of an unknown human task i" +
            "nstance")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to get description of an unknown human task i" +
            "nstance")]
        public virtual void CheckErrorIsReturnedWhenTryingToGetDescriptionOfAnUnknownHumanTaskInstance()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to get description of an unknown human task i" +
                    "nstance", null, ((string[])(null)));
#line 109
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 110
 testRunner.When("execute HTTP GET request \'http://localhost/humantaskinstances/invalid/description" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 111
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 114
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 115
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task instance \'invalid\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to claim an unknown human task instance")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to claim an unknown human task instance")]
        public virtual void CheckErrorIsReturnedWhenTryingToClaimAnUnknownHumanTaskInstance()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to claim an unknown human task instance", null, ((string[])(null)));
#line 117
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 118
 testRunner.When("execute HTTP GET request \'http://localhost/humantaskinstances/invalid/claim\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 119
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 122
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 123
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task instance \'invalid\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to claim an unauthorized human task instance")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to claim an unauthorized human task instance")]
        public virtual void CheckErrorIsReturnedWhenTryingToClaimAnUnauthorizedHumanTaskInstance()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to claim an unauthorized human task instance", null, ((string[])(null)));
#line 125
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table68.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "taskInitiator"});
#line 126
 testRunner.When("authenticate", ((string)(null)), table68, "When ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table69.AddRow(new string[] {
                        "humanTaskName",
                        "multiplePotentialOwners"});
#line 129
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances\'", ((string)(null)), table69, "And ");
#line 132
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
 testRunner.And("extract \'id\' from JSON body into \'humanTaskInstanceId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table70.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "badUser"});
#line 134
 testRunner.And("authenticate", ((string)(null)), table70, "And ");
#line 137
 testRunner.And("execute HTTP GET request \'http://localhost/humantaskinstances/$humanTaskInstanceI" +
                    "d$/claim\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 141
 testRunner.Then("JSON \'status\'=\'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 142
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'User is not authorized\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to claim a human task instance with a status " +
            "different to READY")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to claim a human task instance with a status " +
            "different to READY")]
        public virtual void CheckErrorIsReturnedWhenTryingToClaimAHumanTaskInstanceWithAStatusDifferentToREADY()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to claim a human task instance with a status " +
                    "different to READY", null, ((string[])(null)));
#line 144
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table71.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "taskInitiator"});
#line 145
 testRunner.When("authenticate", ((string)(null)), table71, "When ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table72.AddRow(new string[] {
                        "humanTaskName",
                        "addClient"});
            table72.AddRow(new string[] {
                        "operationParameters",
                        "{ \"isGoldenClient\": \"true\", \"firstName\": \"FirstName\" }"});
#line 148
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances\'", ((string)(null)), table72, "And ");
#line 152
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
 testRunner.And("extract \'id\' from JSON body into \'humanTaskInstanceId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table73.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "administrator"});
#line 154
 testRunner.And("authenticate", ((string)(null)), table73, "And ");
#line 157
 testRunner.And("execute HTTP GET request \'http://localhost/humantaskinstances/$humanTaskInstanceI" +
                    "d$/claim\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 161
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 162
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Operation \'Claim\' can be performed only on \'Ready\' " +
                    "human task instance state\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to start an unknown human task instance")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to start an unknown human task instance")]
        public virtual void CheckErrorIsReturnedWhenTryingToStartAnUnknownHumanTaskInstance()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to start an unknown human task instance", null, ((string[])(null)));
#line 164
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 165
 testRunner.When("execute HTTP GET request \'http://localhost/humantaskinstances/invalid/start\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 166
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 169
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 170
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task instance \'invalid\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to start an unauthorized human task instance")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to start an unauthorized human task instance")]
        public virtual void CheckErrorIsReturnedWhenTryingToStartAnUnauthorizedHumanTaskInstance()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to start an unauthorized human task instance", null, ((string[])(null)));
#line 172
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table74.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "taskInitiator"});
#line 173
 testRunner.When("authenticate", ((string)(null)), table74, "When ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table75.AddRow(new string[] {
                        "humanTaskName",
                        "multiplePotentialOwners"});
#line 176
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances\'", ((string)(null)), table75, "And ");
#line 179
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 180
 testRunner.And("extract \'id\' from JSON body into \'humanTaskInstanceId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table76.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "badUser"});
#line 181
 testRunner.And("authenticate", ((string)(null)), table76, "And ");
#line 184
 testRunner.And("execute HTTP GET request \'http://localhost/humantaskinstances/$humanTaskInstanceI" +
                    "d$/start\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 188
 testRunner.Then("JSON \'status\'=\'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 189
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'User is not authorized\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to start a human task instance with a status " +
            "different to READY/RESERVED")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to start a human task instance with a status " +
            "different to READY/RESERVED")]
        public virtual void CheckErrorIsReturnedWhenTryingToStartAHumanTaskInstanceWithAStatusDifferentToREADYRESERVED()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to start a human task instance with a status " +
                    "different to READY/RESERVED", null, ((string[])(null)));
#line 191
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table77.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "taskInitiator"});
#line 192
 testRunner.When("authenticate", ((string)(null)), table77, "When ");
#line 195
 testRunner.And("add \'10\' seconds into \'activationDeferralTime\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table78.AddRow(new string[] {
                        "humanTaskName",
                        "multiplePotentialOwners"});
            table78.AddRow(new string[] {
                        "activationDeferralTime",
                        "$activationDeferralTime$"});
#line 196
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances\'", ((string)(null)), table78, "And ");
#line 200
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
 testRunner.And("extract \'id\' from JSON body into \'humanTaskInstanceId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table79.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "administrator"});
#line 202
 testRunner.And("authenticate", ((string)(null)), table79, "And ");
#line 205
 testRunner.And("execute HTTP GET request \'http://localhost/humantaskinstances/$humanTaskInstanceI" +
                    "d$/start\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 206
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 209
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 210
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Operation \'Claim\' can be performed only on \'Ready/R" +
                    "eserved\' human task instance state\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to complete a human task instance and no oper" +
            "ationParameters are passed")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to complete a human task instance and no oper" +
            "ationParameters are passed")]
        public virtual void CheckErrorIsReturnedWhenTryingToCompleteAHumanTaskInstanceAndNoOperationParametersArePassed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to complete a human task instance and no oper" +
                    "ationParameters are passed", null, ((string[])(null)));
#line 212
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 213
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantaskinstances/invalid/compl" +
                    "ete\'", ((string)(null)), table80, "When ");
#line 215
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 218
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 219
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Parameter \'operationParameters\' is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to complete an unknown human task instance")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to complete an unknown human task instance")]
        public virtual void CheckErrorIsReturnedWhenTryingToCompleteAnUnknownHumanTaskInstance()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to complete an unknown human task instance", null, ((string[])(null)));
#line 221
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table81.AddRow(new string[] {
                        "operationParameters",
                        "{ \"key\": \"key\", \"value\": \"value\" }"});
#line 222
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantaskinstances/invalid/compl" +
                    "ete\'", ((string)(null)), table81, "When ");
#line 225
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 227
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 228
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 229
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task instance \'invalid\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to complete a human task instance an the stat" +
            "us is not INPROGRESS")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to complete a human task instance an the stat" +
            "us is not INPROGRESS")]
        public virtual void CheckErrorIsReturnedWhenTryingToCompleteAHumanTaskInstanceAnTheStatusIsNotINPROGRESS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to complete a human task instance an the stat" +
                    "us is not INPROGRESS", null, ((string[])(null)));
#line 231
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table82.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "taskInitiator"});
#line 232
 testRunner.When("authenticate", ((string)(null)), table82, "When ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table83.AddRow(new string[] {
                        "Key",
                        "Value"});
            table83.AddRow(new string[] {
                        "humanTaskName",
                        "addClient"});
            table83.AddRow(new string[] {
                        "operationParameters",
                        "{ \"firstName\": \"firstname\", \"isGoldenClient\": \"true\" }"});
#line 235
    testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances\'", ((string)(null)), table83, "And ");
#line 240
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 241
 testRunner.And("extract \'id\' from JSON body into \'humanTaskInstanceId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table84.AddRow(new string[] {
                        "operationParameters",
                        "{ \"key\": \"key\", \"value\": \"value\" }"});
#line 242
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances/$humanTaskIns" +
                    "tanceId$/complete\'", ((string)(null)), table84, "And ");
#line 245
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 247
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 248
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 249
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Operation \'Complete\' can be performed only on \'INPR" +
                    "OGRESS\' human task instance state\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to complete a human task instance and pass in" +
            "valid parameters")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to complete a human task instance and pass in" +
            "valid parameters")]
        public virtual void CheckErrorIsReturnedWhenTryingToCompleteAHumanTaskInstanceAndPassInvalidParameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to complete a human task instance and pass in" +
                    "valid parameters", null, ((string[])(null)));
#line 251
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table85.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "taskInitiator"});
#line 252
 testRunner.When("authenticate", ((string)(null)), table85, "When ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table86.AddRow(new string[] {
                        "Key",
                        "Value"});
            table86.AddRow(new string[] {
                        "humanTaskName",
                        "addClient"});
            table86.AddRow(new string[] {
                        "operationParameters",
                        "{ \"firstName\": \"firstname\", \"isGoldenClient\": \"true\" }"});
#line 255
    testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances\'", ((string)(null)), table86, "And ");
#line 260
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 261
 testRunner.And("extract \'id\' from JSON body into \'humanTaskInstanceId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table87.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "administrator"});
#line 262
 testRunner.And("authenticate", ((string)(null)), table87, "And ");
#line 265
 testRunner.And("execute HTTP GET request \'http://localhost/humantaskinstances/$humanTaskInstanceI" +
                    "d$/start\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table88.AddRow(new string[] {
                        "operationParameters",
                        "{ \"key\": \"key\" }"});
#line 266
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances/$humanTaskIns" +
                    "tanceId$/complete\'", ((string)(null)), table88, "And ");
#line 269
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 271
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 272
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 273
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Parameter \'wage\' is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to complete a human task instance and authent" +
            "icated user is not the actual owner")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskInstances")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to complete a human task instance and authent" +
            "icated user is not the actual owner")]
        public virtual void CheckErrorIsReturnedWhenTryingToCompleteAHumanTaskInstanceAndAuthenticatedUserIsNotTheActualOwner()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to complete a human task instance and authent" +
                    "icated user is not the actual owner", null, ((string[])(null)));
#line 275
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table89.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "taskInitiator"});
#line 276
 testRunner.When("authenticate", ((string)(null)), table89, "When ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table90.AddRow(new string[] {
                        "Key",
                        "Value"});
            table90.AddRow(new string[] {
                        "humanTaskName",
                        "addClient"});
            table90.AddRow(new string[] {
                        "operationParameters",
                        "{ \"firstName\": \"firstname\", \"isGoldenClient\": \"true\" }"});
#line 279
    testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances\'", ((string)(null)), table90, "And ");
#line 284
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 285
 testRunner.And("extract \'id\' from JSON body into \'humanTaskInstanceId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table91.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "administrator"});
#line 286
 testRunner.And("authenticate", ((string)(null)), table91, "And ");
#line 289
 testRunner.And("execute HTTP GET request \'http://localhost/humantaskinstances/$humanTaskInstanceI" +
                    "d$/start\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table92.AddRow(new string[] {
                        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                        "badUser"});
#line 290
 testRunner.And("authenticate", ((string)(null)), table92, "And ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table93.AddRow(new string[] {
                        "operationParameters",
                        "{ \"wage\": \"2\" }"});
#line 293
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances/$humanTaskIns" +
                    "tanceId$/complete\'", ((string)(null)), table93, "And ");
#line 296
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 298
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 299
 testRunner.Then("JSON \'status\'=\'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 300
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Authenticated user is not the actual owner\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ErrorHumanTaskInstancesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ErrorHumanTaskInstancesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
