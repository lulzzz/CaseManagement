// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CaseManagement.HumanTasks.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ErrorHumanTaskDefFeature : Xunit.IClassFixture<ErrorHumanTaskDefFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ErrorHumanTaskDef.feature"
#line hidden
        
        public ErrorHumanTaskDefFeature(ErrorHumanTaskDefFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ErrorHumanTaskDef", "\tCheck errors returned by /humantasksdefs", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to create task with missing name")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to create task with missing name")]
        public virtual void CheckErrorIsReturnedWhenTryingToCreateTaskWithMissingName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to create task with missing name", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 5
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table1, "When ");
#line 7
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Parameter \'name\' is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to add humantaskdef with same name")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to add humantaskdef with same name")]
        public virtual void CheckErrorIsReturnedWhenTryingToAddHumantaskdefWithSameName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to add humantaskdef with same name", null, ((string[])(null)));
#line 13
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table2.AddRow(new string[] {
                        "name",
                        "name"});
#line 14
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table3.AddRow(new string[] {
                        "name",
                        "name"});
#line 17
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table3, "And ");
#line 20
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'The human task def \'name\' already exists\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to get an unknown humantaskdef")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to get an unknown humantaskdef")]
        public virtual void CheckErrorIsReturnedWhenTryingToGetAnUnknownHumantaskdef()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to get an unknown humantaskdef", null, ((string[])(null)));
#line 26
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 27
 testRunner.When("execute HTTP GET request \'http://localhost/humantasksdefs/def\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task definition \'def\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to update information and no name parameter i" +
            "s passed")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to update information and no name parameter i" +
            "s passed")]
        public virtual void CheckErrorIsReturnedWhenTryingToUpdateInformationAndNoNameParameterIsPassed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to update information and no name parameter i" +
                    "s passed", null, ((string[])(null)));
#line 34
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 35
 testRunner.When("execute HTTP PUT JSON request \'http://localhost/humantasksdefs/id/info\'", ((string)(null)), table4, "When ");
#line 37
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 40
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Parameter \'name\' is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to update information of an unknown humantask" +
            "def")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to update information of an unknown humantask" +
            "def")]
        public virtual void CheckErrorIsReturnedWhenTryingToUpdateInformationOfAnUnknownHumantaskdef()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to update information of an unknown humantask" +
                    "def", null, ((string[])(null)));
#line 43
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table5.AddRow(new string[] {
                        "name",
                        "name"});
#line 44
 testRunner.When("execute HTTP PUT JSON request \'http://localhost/humantasksdefs/id/info\'", ((string)(null)), table5, "When ");
#line 47
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 51
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task definition \'id\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to update information with an existing name")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to update information with an existing name")]
        public virtual void CheckErrorIsReturnedWhenTryingToUpdateInformationWithAnExistingName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to update information with an existing name", null, ((string[])(null)));
#line 53
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table6.AddRow(new string[] {
                        "name",
                        "n1"});
#line 54
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table7.AddRow(new string[] {
                        "name",
                        "n2"});
#line 57
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table7, "And ");
#line 60
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And("extract \'id\' from JSON body into \'humanTaskDefId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table8.AddRow(new string[] {
                        "name",
                        "n1"});
#line 62
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/humantasksdefs/$humanTaskDefId$/i" +
                    "nfo\'", ((string)(null)), table8, "And ");
#line 65
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 68
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'The human task def \'n1\' already exists\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to update people assignment")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to update people assignment")]
        public virtual void CheckErrorIsReturnedWhenTryingToUpdatePeopleAssignment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to update people assignment", null, ((string[])(null)));
#line 71
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 72
 testRunner.When("execute HTTP PUT JSON request \'http://localhost/humantasksdefs/def/assignment\'", ((string)(null)), table9, "When ");
#line 74
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 77
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task definition \'def\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to add input parameter to unknown humantaskde" +
            "f")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to add input parameter to unknown humantaskde" +
            "f")]
        public virtual void CheckErrorIsReturnedWhenTryingToAddInputParameterToUnknownHumantaskdef()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to add input parameter to unknown humantaskde" +
                    "f", null, ((string[])(null)));
#line 79
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 80
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs/def/parameters/in" +
                    "put\'", ((string)(null)), table10, "When ");
#line 82
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 84
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 85
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task definition \'def\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to add input parameter and parameter is missi" +
            "ng")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to add input parameter and parameter is missi" +
            "ng")]
        public virtual void CheckErrorIsReturnedWhenTryingToAddInputParameterAndParameterIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to add input parameter and parameter is missi" +
                    "ng", null, ((string[])(null)));
#line 87
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table11.AddRow(new string[] {
                        "name",
                        "inputParameter1"});
#line 88
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table11, "When ");
#line 91
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.And("extract \'id\' from JSON body into \'humanTaskDefId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 93
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantasksdefs/$humanTaskDefId$/" +
                    "parameters/input\'", ((string)(null)), table12, "And ");
#line 95
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 97
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 98
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Parameter \'parameter\' is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to add already existing input parameter")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to add already existing input parameter")]
        public virtual void CheckErrorIsReturnedWhenTryingToAddAlreadyExistingInputParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to add already existing input parameter", null, ((string[])(null)));
#line 100
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table13.AddRow(new string[] {
                        "name",
                        "inputParameter2"});
#line 101
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table13, "When ");
#line 104
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.And("extract \'id\' from JSON body into \'humanTaskDefId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table14.AddRow(new string[] {
                        "parameter",
                        "{ name: \'parameter\', type: \'STRING\' }"});
#line 106
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantasksdefs/$humanTaskDefId$/" +
                    "parameters/input\'", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table15.AddRow(new string[] {
                        "parameter",
                        "{ name: \'parameter\', type: \'STRING\' }"});
#line 109
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantasksdefs/$humanTaskDefId$/" +
                    "parameters/input\'", ((string)(null)), table15, "And ");
#line 112
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 114
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 115
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Input parameter \'parameter\' already exists\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to add output parameter to unknown humantaskd" +
            "ef")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to add output parameter to unknown humantaskd" +
            "ef")]
        public virtual void CheckErrorIsReturnedWhenTryingToAddOutputParameterToUnknownHumantaskdef()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to add output parameter to unknown humantaskd" +
                    "ef", null, ((string[])(null)));
#line 117
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 118
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs/def/parameters/ou" +
                    "tput\'", ((string)(null)), table16, "When ");
#line 120
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 122
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 123
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task definition \'def\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to add output parameter and parameter is miss" +
            "ing")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to add output parameter and parameter is miss" +
            "ing")]
        public virtual void CheckErrorIsReturnedWhenTryingToAddOutputParameterAndParameterIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to add output parameter and parameter is miss" +
                    "ing", null, ((string[])(null)));
#line 125
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table17.AddRow(new string[] {
                        "name",
                        "outputParameter1"});
#line 126
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table17, "When ");
#line 129
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.And("extract \'id\' from JSON body into \'humanTaskDefId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 131
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantasksdefs/$humanTaskDefId$/" +
                    "parameters/output\'", ((string)(null)), table18, "And ");
#line 133
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 135
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 136
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Parameter \'parameter\' is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to add already existing output parameter")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to add already existing output parameter")]
        public virtual void CheckErrorIsReturnedWhenTryingToAddAlreadyExistingOutputParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to add already existing output parameter", null, ((string[])(null)));
#line 138
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table19.AddRow(new string[] {
                        "name",
                        "outputParameter2"});
#line 139
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table19, "When ");
#line 142
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
 testRunner.And("extract \'id\' from JSON body into \'humanTaskDefId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table20.AddRow(new string[] {
                        "parameter",
                        "{ name: \'parameter\', type: \'STRING\' }"});
#line 144
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantasksdefs/$humanTaskDefId$/" +
                    "parameters/output\'", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table21.AddRow(new string[] {
                        "parameter",
                        "{ name: \'parameter\', type: \'STRING\' }"});
#line 147
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantasksdefs/$humanTaskDefId$/" +
                    "parameters/output\'", ((string)(null)), table21, "And ");
#line 150
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 152
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 153
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Output parameter \'parameter\' already exists\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to delete input parameter from unknown humant" +
            "askdef")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to delete input parameter from unknown humant" +
            "askdef")]
        public virtual void CheckErrorIsReturnedWhenTryingToDeleteInputParameterFromUnknownHumantaskdef()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to delete input parameter from unknown humant" +
                    "askdef", null, ((string[])(null)));
#line 155
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 156
 testRunner.When("execute HTTP DELETE request \'http://localhost/humantasksdefs/def/parameters/input" +
                    "/name\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 157
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 159
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 160
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task definition \'def\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to delete unknown input parameter")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to delete unknown input parameter")]
        public virtual void CheckErrorIsReturnedWhenTryingToDeleteUnknownInputParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to delete unknown input parameter", null, ((string[])(null)));
#line 162
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table22.AddRow(new string[] {
                        "name",
                        "deleteParameter1"});
#line 163
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table22, "When ");
#line 166
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 167
 testRunner.And("extract \'id\' from JSON body into \'humanTaskDefId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
 testRunner.And("execute HTTP DELETE request \'http://localhost/humantasksdefs/$humanTaskDefId$/par" +
                    "ameters/input/name\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 169
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 171
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 172
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Input parameter \'parameter\' doesn\'t exist\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to delete ouput parameter from unknown humant" +
            "askdef")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to delete ouput parameter from unknown humant" +
            "askdef")]
        public virtual void CheckErrorIsReturnedWhenTryingToDeleteOuputParameterFromUnknownHumantaskdef()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to delete ouput parameter from unknown humant" +
                    "askdef", null, ((string[])(null)));
#line 174
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 175
 testRunner.When("execute HTTP DELETE request \'http://localhost/humantasksdefs/def/parameters/outpu" +
                    "t/name\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 176
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 178
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 179
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task definition \'def\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to delete unknown output parameter")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to delete unknown output parameter")]
        public virtual void CheckErrorIsReturnedWhenTryingToDeleteUnknownOutputParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to delete unknown output parameter", null, ((string[])(null)));
#line 181
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table23.AddRow(new string[] {
                        "name",
                        "deleteParameter2"});
#line 182
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table23, "When ");
#line 185
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
 testRunner.And("extract \'id\' from JSON body into \'humanTaskDefId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
 testRunner.And("execute HTTP DELETE request \'http://localhost/humantasksdefs/$humanTaskDefId$/par" +
                    "ameters/output/name\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 190
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 191
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Output parameter \'parameter\' doesn\'t exist\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to update presentation element and \'presentat" +
            "ionElement\' parameter is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to update presentation element and \'presentat" +
            "ionElement\' parameter is missing")]
        public virtual void CheckErrorIsReturnedWhenTryingToUpdatePresentationElementAndPresentationElementParameterIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to update presentation element and \'presentat" +
                    "ionElement\' parameter is missing", null, ((string[])(null)));
#line 193
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 194
 testRunner.When("execute HTTP PUT JSON request \'http://localhost/humantasksdefs/id/presentationelt" +
                    "s\'", ((string)(null)), table24, "When ");
#line 196
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 198
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 199
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 200
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Parameter \'presentationElement\' is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to update presentation element of an unknown " +
            "humantaskdef")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to update presentation element of an unknown " +
            "humantaskdef")]
        public virtual void CheckErrorIsReturnedWhenTryingToUpdatePresentationElementOfAnUnknownHumantaskdef()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to update presentation element of an unknown " +
                    "humantaskdef", null, ((string[])(null)));
#line 202
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table25.AddRow(new string[] {
                        "presentationElement",
                        "{ names: [ { language: \"fr\", value: \"bonjour\" } ] }"});
#line 203
 testRunner.When("execute HTTP PUT JSON request \'http://localhost/humantasksdefs/id/presentationelt" +
                    "s\'", ((string)(null)), table25, "When ");
#line 206
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 209
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 210
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task definition \'id\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to add start deadline and \'deadLine\' paramete" +
            "r is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to add start deadline and \'deadLine\' paramete" +
            "r is missing")]
        public virtual void CheckErrorIsReturnedWhenTryingToAddStartDeadlineAndDeadLineParameterIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to add start deadline and \'deadLine\' paramete" +
                    "r is missing", null, ((string[])(null)));
#line 212
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 213
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs/id/deadlines/star" +
                    "t\'", ((string)(null)), table26, "When ");
#line 215
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 218
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 219
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Parameter \'deadLine\' is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to add start deadline and humantaskdef is mis" +
            "sing")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to add start deadline and humantaskdef is mis" +
            "sing")]
        public virtual void CheckErrorIsReturnedWhenTryingToAddStartDeadlineAndHumantaskdefIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to add start deadline and humantaskdef is mis" +
                    "sing", null, ((string[])(null)));
#line 221
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table27.AddRow(new string[] {
                        "deadLine",
                        "{ name: \"Name\" }"});
#line 222
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs/id/deadlines/star" +
                    "t\'", ((string)(null)), table27, "When ");
#line 225
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 227
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 228
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 229
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task definition \'id\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to add start deadline and deadline name is mi" +
            "ssing")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to add start deadline and deadline name is mi" +
            "ssing")]
        public virtual void CheckErrorIsReturnedWhenTryingToAddStartDeadlineAndDeadlineNameIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to add start deadline and deadline name is mi" +
                    "ssing", null, ((string[])(null)));
#line 231
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table28.AddRow(new string[] {
                        "name",
                        "addStartDeadlineParameter1"});
#line 232
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table28, "When ");
#line 235
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.And("extract \'id\' from JSON body into \'humanTaskDefId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table29.AddRow(new string[] {
                        "deadLine",
                        "{ }"});
#line 237
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantasksdefs/$humanTaskDefId$/" +
                    "deadlines/start\'", ((string)(null)), table29, "And ");
#line 240
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 242
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 243
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 244
 testRunner.Then("JSON \'errors.validation[0]\'=\'Parameter \'deadline.name\' is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to add start deadline and for & until paramet" +
            "ers are missing")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to add start deadline and for & until paramet" +
            "ers are missing")]
        public virtual void CheckErrorIsReturnedWhenTryingToAddStartDeadlineAndForUntilParametersAreMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to add start deadline and for & until paramet" +
                    "ers are missing", null, ((string[])(null)));
#line 246
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table30.AddRow(new string[] {
                        "name",
                        "addStartDeadlineParameter2"});
#line 247
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table30, "When ");
#line 250
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
 testRunner.And("extract \'id\' from JSON body into \'humanTaskDefId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table31.AddRow(new string[] {
                        "deadLine",
                        "{ name: \"name\" }"});
#line 252
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantasksdefs/$humanTaskDefId$/" +
                    "deadlines/start\'", ((string)(null)), table31, "And ");
#line 255
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 257
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 258
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 259
 testRunner.Then("JSON \'errors.validation[0]\'=\'Parameter \'deadline.for,deadline.until\' is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to add start deadline and for & until paramet" +
            "ers are present")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to add start deadline and for & until paramet" +
            "ers are present")]
        public virtual void CheckErrorIsReturnedWhenTryingToAddStartDeadlineAndForUntilParametersArePresent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to add start deadline and for & until paramet" +
                    "ers are present", null, ((string[])(null)));
#line 261
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table32.AddRow(new string[] {
                        "name",
                        "addStartDeadlineParameter3"});
#line 262
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table32, "When ");
#line 265
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 266
 testRunner.And("extract \'id\' from JSON body into \'humanTaskDefId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table33.AddRow(new string[] {
                        "deadLine",
                        "{ name: \"name\", for: \"for\", until: \"until\" }"});
#line 267
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantasksdefs/$humanTaskDefId$/" +
                    "deadlines/start\'", ((string)(null)), table33, "And ");
#line 270
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 273
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 274
 testRunner.Then("JSON \'errors.validation[0]\'=\'Parameters \'deadline.for,deadline.until\' cannot be s" +
                    "pecified at the same time\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to add start deadline and until is not a vali" +
            "d ISO8601 expression")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to add start deadline and until is not a vali" +
            "d ISO8601 expression")]
        public virtual void CheckErrorIsReturnedWhenTryingToAddStartDeadlineAndUntilIsNotAValidISO8601Expression()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to add start deadline and until is not a vali" +
                    "d ISO8601 expression", null, ((string[])(null)));
#line 276
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table34.AddRow(new string[] {
                        "name",
                        "addStartDeadlineParameter4"});
#line 277
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table34, "When ");
#line 280
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 281
 testRunner.And("extract \'id\' from JSON body into \'humanTaskDefId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table35.AddRow(new string[] {
                        "deadLine",
                        "{ name: \"name\", until: \"until\" }"});
#line 282
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantasksdefs/$humanTaskDefId$/" +
                    "deadlines/start\'", ((string)(null)), table35, "And ");
#line 285
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 287
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 288
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 289
 testRunner.Then("JSON \'errors.validation[0]\'=\'Parameter \'deadline.until\' is not a valid ISO8601 ex" +
                    "pression\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to remove start deadline from unknown humanta" +
            "sk definition")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to remove start deadline from unknown humanta" +
            "sk definition")]
        public virtual void CheckErrorIsReturnedWhenTryingToRemoveStartDeadlineFromUnknownHumantaskDefinition()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to remove start deadline from unknown humanta" +
                    "sk definition", null, ((string[])(null)));
#line 291
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 292
 testRunner.When("execute HTTP DELETE request \'http://localhost/humantasksdefs/def/deadlines/start/" +
                    "deadLineId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 293
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 295
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 296
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 297
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task definition \'def\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to remove unknown start deadline")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to remove unknown start deadline")]
        public virtual void CheckErrorIsReturnedWhenTryingToRemoveUnknownStartDeadline()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to remove unknown start deadline", null, ((string[])(null)));
#line 299
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table36.AddRow(new string[] {
                        "name",
                        "startDeadlineParameter1"});
#line 300
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table36, "When ");
#line 303
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 304
 testRunner.And("extract \'id\' from JSON body into \'humanTaskDefId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 305
 testRunner.And("execute HTTP DELETE request \'http://localhost/humantasksdefs/$humanTaskDefId$/dea" +
                    "dlines/start/deadLineId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 306
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 308
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 309
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 310
 testRunner.Then("JSON \'errors.validation[0]\'=\'Start deadline doesn\'t exist\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to remove completion deadline from unknown hu" +
            "mantask definition")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to remove completion deadline from unknown hu" +
            "mantask definition")]
        public virtual void CheckErrorIsReturnedWhenTryingToRemoveCompletionDeadlineFromUnknownHumantaskDefinition()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to remove completion deadline from unknown hu" +
                    "mantask definition", null, ((string[])(null)));
#line 312
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 313
 testRunner.When("execute HTTP DELETE request \'http://localhost/humantasksdefs/def/deadlines/comple" +
                    "tion/deadLineId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 314
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 316
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 317
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 318
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task definition \'def\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to remove unknown completion deadline")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to remove unknown completion deadline")]
        public virtual void CheckErrorIsReturnedWhenTryingToRemoveUnknownCompletionDeadline()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to remove unknown completion deadline", null, ((string[])(null)));
#line 320
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table37.AddRow(new string[] {
                        "name",
                        "startDeadlineParameter2"});
#line 321
 testRunner.When("execute HTTP POST JSON request \'http://localhost/humantasksdefs\'", ((string)(null)), table37, "When ");
#line 324
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 325
 testRunner.And("extract \'id\' from JSON body into \'humanTaskDefId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
 testRunner.And("execute HTTP DELETE request \'http://localhost/humantasksdefs/$humanTaskDefId$/dea" +
                    "dlines/completion/deadLineId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 327
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 329
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 330
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 331
 testRunner.Then("JSON \'errors.validation[0]\'=\'Completion deadline doesn\'t exist\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to update start deadline and parameter is mis" +
            "sing")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to update start deadline and parameter is mis" +
            "sing")]
        public virtual void CheckErrorIsReturnedWhenTryingToUpdateStartDeadlineAndParameterIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to update start deadline and parameter is mis" +
                    "sing", null, ((string[])(null)));
#line 333
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 334
 testRunner.When("execute HTTP PUT JSON request \'http://localhost/humantasksdefs/def/deadlines/star" +
                    "t/deadLineId\'", ((string)(null)), table38, "When ");
#line 336
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 338
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 339
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 340
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Parameter \'deadLineInfo\' is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to update start deadline and humantaskdef is " +
            "unknown")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to update start deadline and humantaskdef is " +
            "unknown")]
        public virtual void CheckErrorIsReturnedWhenTryingToUpdateStartDeadlineAndHumantaskdefIsUnknown()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to update start deadline and humantaskdef is " +
                    "unknown", null, ((string[])(null)));
#line 342
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table39.AddRow(new string[] {
                        "deadLineInfo",
                        "{ name: \"name\" }"});
#line 343
 testRunner.When("execute HTTP PUT JSON request \'http://localhost/humantasksdefs/def/deadlines/star" +
                    "t/deadLineId\'", ((string)(null)), table39, "When ");
#line 346
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 348
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 349
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 350
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task definition \'def\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to update completion deadline and parameter i" +
            "s missing")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to update completion deadline and parameter i" +
            "s missing")]
        public virtual void CheckErrorIsReturnedWhenTryingToUpdateCompletionDeadlineAndParameterIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to update completion deadline and parameter i" +
                    "s missing", null, ((string[])(null)));
#line 353
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 354
 testRunner.When("execute HTTP PUT JSON request \'http://localhost/humantasksdefs/def/deadlines/comp" +
                    "letion/deadLineId\'", ((string)(null)), table40, "When ");
#line 356
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 358
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 359
 testRunner.Then("JSON \'status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 360
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Parameter \'deadLineInfo\' is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check error is returned when trying to update completion deadline and humantaskde" +
            "f is unknown")]
        [Xunit.TraitAttribute("FeatureTitle", "ErrorHumanTaskDef")]
        [Xunit.TraitAttribute("Description", "Check error is returned when trying to update completion deadline and humantaskde" +
            "f is unknown")]
        public virtual void CheckErrorIsReturnedWhenTryingToUpdateCompletionDeadlineAndHumantaskdefIsUnknown()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check error is returned when trying to update completion deadline and humantaskde" +
                    "f is unknown", null, ((string[])(null)));
#line 362
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table41.AddRow(new string[] {
                        "deadLineInfo",
                        "{ name: \"name\" }"});
#line 363
 testRunner.When("execute HTTP PUT JSON request \'http://localhost/humantasksdefs/def/deadlines/comp" +
                    "letion/deadLineId\'", ((string)(null)), table41, "When ");
#line 366
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 368
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 369
 testRunner.Then("JSON \'status\'=\'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 370
 testRunner.Then("JSON \'errors.bad_request[0]\'=\'Unknown human task definition \'def\'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ErrorHumanTaskDefFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ErrorHumanTaskDefFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
