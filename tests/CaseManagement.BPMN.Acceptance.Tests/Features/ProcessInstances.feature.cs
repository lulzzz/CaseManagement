// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CaseManagement.BPMN.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ProcessInstancesFeature : Xunit.IClassFixture<ProcessInstancesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ProcessInstances.feature"
#line hidden
        
        public ProcessInstancesFeature(ProcessInstancesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ProcessInstances", "\tCheck result returned by /processinstances", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Launch CreateUserAccount bpmn process")]
        [Xunit.TraitAttribute("FeatureTitle", "ProcessInstances")]
        [Xunit.TraitAttribute("Description", "Launch CreateUserAccount bpmn process")]
        public virtual void LaunchCreateUserAccountBpmnProcess()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Launch CreateUserAccount bpmn process", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table7.AddRow(new string[] {
                        "processFileId",
                        "17ac18f07c031f808c55b8e9ff543161b90492947ac7449f682b67bd23e92053"});
#line 5
 testRunner.When("execute HTTP POST JSON request \'http://localhost/processinstances\'", ((string)(null)), table7, "When ");
#line 8
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And("extract \'content[0].id\' from JSON body into \'processInstanceId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("execute HTTP GET request \'http://localhost/processinstances/$processInstanceId$/s" +
                    "tart\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 11
 testRunner.And("poll HTTP POST JSON request \'http://localhost/humantaskinstances/.search\', until " +
                    "\'$.content[?(@.name == \'emptyTask\')].name\'=\'emptyTask\'", ((string)(null)), table8, "And ");
#line 13
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("extract \'$.content[?(@.name == \'emptyTask\')].id\' from JSON body into \'humanTaskIn" +
                    "stanceId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("execute HTTP GET request \'http://localhost/humantaskinstances/$humanTaskInstanceI" +
                    "d$/start\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table9.AddRow(new string[] {
                        "operationParameters",
                        "{}"});
#line 16
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances/$humanTaskIns" +
                    "tanceId$/complete\'", ((string)(null)), table9, "And ");
#line 19
 testRunner.And("poll \'http://localhost/processinstances/$processInstanceId$\', until \'executionPat" +
                    "hs[0].executionPointers[0].flowNodeInstance.state\'=\'Complete\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And("poll \'http://localhost/processinstances/$processInstanceId$\', until \'executionPat" +
                    "hs[0].executionPointers[1].flowNodeInstance.state\'=\'Complete\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Launch GetWeatherInformation bpmn process")]
        [Xunit.TraitAttribute("FeatureTitle", "ProcessInstances")]
        [Xunit.TraitAttribute("Description", "Launch GetWeatherInformation bpmn process")]
        public virtual void LaunchGetWeatherInformationBpmnProcess()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Launch GetWeatherInformation bpmn process", null, ((string[])(null)));
#line 22
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table10.AddRow(new string[] {
                        "processFileId",
                        "5ff28e2e6e1175bf69ec33fc5253620bfad4b1340a1ecfb20ea771e3bc76bb0e"});
#line 23
 testRunner.When("execute HTTP POST JSON request \'http://localhost/processinstances\'", ((string)(null)), table10, "When ");
#line 26
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("extract \'content[0].id\' from JSON body into \'processInstanceId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.When("execute HTTP GET request \'http://localhost/processinstances/$processInstanceId$/s" +
                    "tart\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 29
 testRunner.And("poll HTTP POST JSON request \'http://localhost/humantaskinstances/.search\', until " +
                    "\'$.content[?(@.name == \'dressAppropriateForm\')].name\'=\'dressAppropriateForm\'", ((string)(null)), table11, "And ");
#line 31
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("extract \'$.content[?(@.name == \'dressAppropriateForm\')].id\' from JSON body into \'" +
                    "humanTaskInstanceId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.And("execute HTTP GET request \'http://localhost/humantaskinstances/$humanTaskInstanceI" +
                    "d$/start\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table12.AddRow(new string[] {
                        "operationParameters",
                        "{}"});
#line 34
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances/$humanTaskIns" +
                    "tanceId$/complete\'", ((string)(null)), table12, "And ");
#line 37
 testRunner.And("poll \'http://localhost/processinstances/$processInstanceId$\', until \'executionPat" +
                    "hs[0].executionPointers[0].flowNodeInstance.state\'=\'Complete\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("poll \'http://localhost/processinstances/$processInstanceId$\', until \'executionPat" +
                    "hs[0].executionPointers[1].flowNodeInstance.state\'=\'Complete\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Launch GetAppropriateDress bpmn process")]
        [Xunit.TraitAttribute("FeatureTitle", "ProcessInstances")]
        [Xunit.TraitAttribute("Description", "Launch GetAppropriateDress bpmn process")]
        public virtual void LaunchGetAppropriateDressBpmnProcess()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Launch GetAppropriateDress bpmn process", null, ((string[])(null)));
#line 40
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table13.AddRow(new string[] {
                        "processFileId",
                        "db7c8302dfca4222832aaa98320d228ae2eed2d63b16ed25a5e761a2f781b719"});
#line 41
 testRunner.When("execute HTTP POST JSON request \'http://localhost/processinstances\'", ((string)(null)), table13, "When ");
#line 44
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("extract \'content[0].id\' from JSON body into \'processInstanceId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.When("execute HTTP GET request \'http://localhost/processinstances/$processInstanceId$/s" +
                    "tart\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 47
 testRunner.And("poll HTTP POST JSON request \'http://localhost/humantaskinstances/.search\', until " +
                    "\'$.content[?(@.name == \'temperatureForm\')].name\'=\'temperatureForm\'", ((string)(null)), table14, "And ");
#line 49
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.And("extract \'$.content[?(@.name == \'temperatureForm\')].id\' from JSON body into \'human" +
                    "TaskInstanceId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.And("execute HTTP GET request \'http://localhost/humantaskinstances/$humanTaskInstanceI" +
                    "d$/start\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table15.AddRow(new string[] {
                        "operationParameters",
                        "{ \"degree\" : \"30\" }"});
#line 52
 testRunner.And("execute HTTP POST JSON request \'http://localhost/humantaskinstances/$humanTaskIns" +
                    "tanceId$/complete\'", ((string)(null)), table15, "And ");
#line 55
 testRunner.And("poll \'http://localhost/processinstances/$processInstanceId$\', until \'executionPat" +
                    "hs[0].executionPointers[?(@.flowNodeId == \'Activity_1b13yqe\')].flowNodeInstance." +
                    "state\'=\'Complete\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ProcessInstancesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ProcessInstancesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
